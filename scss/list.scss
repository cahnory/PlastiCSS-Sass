// Searches the list for a given value and returns the
// corresponding key or false if not found.
//
// @param list   $list
// @return mixed
@function inList($list, $value) {
  $i: 1;
  @each $v in $list {
    @if $v == $value {
      @return $i;
    }
    $i: $i + 1;
  }
  @return false;
}

// Returns the value of the last element or false for empty list.
//
// @param list   $list
// @return mixed
@function last($list) {
  $l: length($list);
  @if $l > 0 {
    @return nth($list, $l);
  }

  @return false;
}

// Extract a slice of the list
//
// Returns the sequence of elements from the list as
// specified by the offset and length parameters.
//
// @param list   $list
// @param number $offset
// @param number $length
// @return list
@function slice($list, $offset, $length: -1, $separator: auto) {
  $new: ();
  $l: length($list);
  $limit: $offset + $length - 1;

  @while $offset <= $l {
    $new: append($new, nth($list, $offset), $separator);
    @if($offset == $limit) {
      @return $new;
    }
    $offset: $offset + 1;
  }

  @if length($new) == 0 {
    @return null;
  }

  @return $new;
}

// Remove a portion of the list and replace it with something else
//
// Removes the elements designated by offset and length
// from the input list, and replaces them with the elements
// of the replacement list, if supplied.
//
// Returns the modified list.
//
// @param list   $list
// @param number $offset
// @param number $length
// @param list   $replacement
// @return list
@function splice($list, $offset, $length, $replacement: false, $separator: auto) {
  $new: slice($list, 1, $offset - 1);
  @if $replacement != false {
    $new: append($new, $replacement);
  }
  @return join($new, slice($list, $offset + $length, $separator), $separator);
}

@function replace($list, $key, $value, $separator: auto) {
  @if $key <= length($list) {
    @return splice($list, $key, 1, $value, $separator);
  }
  @else {
    @return append(pad($list, $key - 1, null), $value, $separator);
  }
}

@function pad($list, $length, $value: null, $separator: auto) {
  @while length($list) < $length {
    $list: append($list, $value, $separator);
  }
  @return $list;
}

@function implode($list, $join, $deep: false) {
  $joined: '';
  $i: 0;
  @each $value in $list {
    @if $i != 0 {
      $joined: $joined + $join;
    }
    @if $deep != false and length($value) > 1 {
      $value: implode($value, $join, true);
    }
    $joined: $joined + $value;
    $i: $i + 1;
  }

  @return $joined;
}

@function intersect($a, $b) {
  $new: ();
  @each $value in $a {
    @if inList($b, $value) != false {
      $new: append($new, $value);
    }
  }
  @return $new;
}
@function diff($a, $b) {
  $i: 1;
  $l: max(length($a), length($b));
  $new: ();
  @while $i <= $l {
    $value: nth($a, $i);
    @if inList($b, $value) == false {
      $new: append($new, $value);
    }
    $value: nth($b, $i);
    @if inList($a, $value) == false {
      $new: append($new, $value);
    }
    $i: $i + 1;
  }
  @return $new;
}