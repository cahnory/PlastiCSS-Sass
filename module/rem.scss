$cfg-rem-size:  10px !default;
$cfg-rem-px:    1px !default;
$cfg-rem-auto:  true !default;

// Remove number unit
//
// @param number $value
// @return number
@function removeUnit($value) {
  @return $value / ($value * 0 + 1);
}

// Convert single re value to px
//
// @param number $value
// @return number
@function pxToRem($value) {
  @if type-of($value) == 'number' and unit($value) == 'px' {
    $value: removeUnit($value) / removeUnit($cfg-rem-size) + rem;
  }
  @return $value;
}

// Convert any px value in the list to rem
//
// @param list $list
// @param list $rest (catch multiple values)
// @return list
@function toRem($list, $rest...) {
  $output: $list;

  // Single value
  @if length($list) == 1 {
    $output: pxToRem($list);
  }

  // Spaced values
  @else {
    $output: ();
    @each $value in $list {
      $output: append($output, toRem($value));
    }
  }

  // Comma separated values
  @each $value in $rest {
    $output: $output, toRem($value);
  }

  @return $output;
}

// Convert single px value to rem
//
// @param number $value
// @return number
@function remToPx($value) {
  @if type-of($value) == 'number' and unit($value) == 'rem' {
    $value: removeUnit($value) * removeUnit($cfg-rem-size) + px;
  }
  @return $value;
}

// Convert any rem value in the list to px
//
// @param list $list
// @param list $rest (catch multiple values)
// @return list
@function toPx($list, $rest...) {
  $output: null;

  // Single value
  @if length($list) == 1 {
    $output: remToPx($list);
  }

  // Spaced values
  @else {
    $output: ();
    @each $value in $list {
      $output: append($output, toPx($value));
    }
  }

  // Comma separated values
  @each $value in $rest {
    $output: $output, toPx($value);
  }

  @return $output;
}

// Search for a unit usage in values
//
// @param string $unit
// @param list   $list
// @param list   $rest (catch multiple values)
// @return number
@function hasUnit($unit, $list, $rest...) {
  // Single value
  @if length($list) == 1 {
    @return type-of($list) == 'number' and unit($list) == $unit;
  }

  // Spaced values
  @else {
    @each $value in $list {
      @if hasUnit($unit, $value) {
        @return true;
      }
    }
  }

  // Comma separated values
  @each $value in $rest {
    @if hasUnit($unit, $value) {
      @return true;
    }
  }

  @return false;
}

// Set a property. If values list contains rem values, 
// an alternate declaration version is set with rem 
// values converted to px.
//
// @param string $property property name
// @param list   $rem      property values
// @return list
@mixin rem($property, $value...) {
  @if $cfg-rem-auto
  and hasUnit('rem', $value...) {
    #{$property}: toPx($value...);
  }
  #{$property}: $value;
}