// Browsers with corresponding vendor prefix
$support-browsers: (0);
$support-browsers-prefixes: (0);
$support-browsers-versions: (0);

// Properties with corresponding vendor prefixes
$support-properties: (0);
$support-properties-prefixes: (0);

$support-limit-prefixes: false;

// Check if supplied version is lower than
// breakpoint.
//
// @param $version    version to test
// @param $breakpoint first version which does not require support
//
// @return bool       true if support is needed
@function support-needed($version, $breakpoint) {
  $ls: length($version);
  $lu: length($breakpoint);
  $min: min($ls, $lu);
  $i: 1;

  // Browser not supported
  @if $version == none {
    @return false;
  }

  // Apply to all versions
  @else if $breakpoint == none {
    @return true;
  }

  // Check if version is supported
  @while $i <= $min {
    $s: nth($version, $i);
    $u: nth($breakpoint, $i);
    $i: $i + 1;

    @if $s < $u {
      @return true;
    }
    @else if $s > $u {
      @return false;
    }
  }

  @return $ls < $lu;
}

@function support-getBrowserKey($name, $version: none, $prefix: false, $auto: true) {
  $key: inList($support-browsers, $name);

  @if $key == false and $auto {
    $support-browsers:           append($support-browsers, $name, comma);
    $support-browsers-prefixes:  append($support-browsers-prefixes, $prefix, comma);
    $support-browsers-versions:  append($support-browsers-versions, $version, comma);
    $key: length($support-browsers);
  }

  @return $key;
}
@function support-browser($name, $version: 0, $prefix: false) {
  $key: inList($support-browsers, $name);

  @if $key == false {
    $key: support-getBrowserKey($name, $version, $prefix);
  }
  @else {
    $support-browsers-prefixes:  replace($support-browsers-prefixes, $key, $prefix, comma);
    $support-browsers-versions:  replace($support-browsers-versions, $key, $version, comma);
  }

  @return $key;
}

@function support-getPropertyKey($name) {
  $key: inList($support-properties, $name);

  @if $key == false {
    $support-properties:           append($support-properties, $name, comma);
    $support-properties-prefixes:  append($support-properties-prefixes, null, comma);
    $key: length($support-properties);
  }

  @return $key;
}
@function support-getPropertyPrefixes($name) {
  $key: support-getPropertyKey($name);
  @return nth($support-properties-prefixes, $key);
}
@function support-property($name, $browser, $breakpoint: none) {
  // Browser
  $key: support-getBrowserKey($browser);
  $prefix:  nth($support-browsers-prefixes, $key);
  $version: nth($support-browsers-versions, $key);

  // Property
  $key: support-getPropertyKey($name);
  $prefixes: nth($support-properties-prefixes, $key);

  @if $prefix != false
  and inList($prefixes, $prefix) == false
  and support-needed($version, $breakpoint) {
    @if $prefixes == null {
      $prefixes: $prefix;
    }
    @else {
      $prefixes: join($prefixes, $prefix, space);
    }
    $support-properties-prefixes: replace($support-properties-prefixes, $key, $prefixes, comma);
  }

  @return $key;
}

@function support-limit-prefix($prefix: false) {
  $support-limit-prefixes: $prefix;
  @return true;
}

@mixin support-prefix-property($property, $values, $prefixes, $std: after) {
  @if $std == before { @include rem($property, $values...) }
  @if $prefixes != null {
    @each $prefix in $prefixes {
      @include rem(-#{$prefix}-#{$property}, $values...);
    }
  }
  @if $std == after { @include rem($property, $values...) }
}

@mixin support-apply-prefix($property, $values, $std: after, $as: $property, $limit: null) {
  $p: support-getPropertyPrefixes($as);
  @if $limit != null {
    $p: intersect($p, $limit);
  }
  @if $support-limit-prefixes != false {
    $p: intersect($p, $support-limit-prefixes);
  }
  @include support-prefix-property($property, $values, $p, $std);
}

// Desktop support
$support-tmp: support-browser(chrome,         0, webkit);
$support-tmp: support-browser(firefox,        0, moz);
$support-tmp: support-browser(ie,             0, ie);
$support-tmp: support-browser(opera,          0, o);
$support-tmp: support-browser(safari,         0, webkit);

// Mobile support
$support-tmp: support-browser(android,        0, webkit);
$support-tmp: support-browser(blackberry,     0, webkit);
$support-tmp: support-browser(firefox-mobile, 0, moz);
$support-tmp: support-browser(opera-mini,     0, o);
$support-tmp: support-browser(opera-mobile,   0, o);
$support-tmp: support-browser(safari-ios,     0, webkit);